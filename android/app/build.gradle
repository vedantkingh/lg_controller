def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.dicedmelon.gradle.jacoco-android'

jacoco {
    toolVersion = "0.8.4"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    buildFeatures {
        viewBinding true
    }

    flavorDimensions("default")
//    flavorDimensions "default"

    // productFlavors {
    //     free {
    //         applicationIdSuffix ".free"
    //     }
    //     pro {
    //         applicationIdSuffix ".pro"
    //     }
    // }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.liquidgalaxy.lg_controller"
        minSdkVersion 20
        targetSdkVersion 33
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }
    lint {
        disable 'InvalidPackage'
    }
    namespace 'com.liquidgalaxy.lg_controller'
}


flutter {
    source '../..'
}
// configurations.all {
//     resolutionStrategy {
//         // Force the use of the variant that matches the desired attributes
//         def buildType = getAttributes().getAttribute(Attribute.of("com.android.build.api.attributes.BuildTypeAttr"))
//         def agpVersion = getAttributes().getAttribute(Attribute.of("com.android.build.api.attributes.AgpVersionAttr"))
//         force "org.jetbrains.kotlin:kotlin-gradle-plugin:1.7.10:${buildType}:${agpVersion}"
//     }
// }

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    implementation 'com.android.support:multidex:1.0.3'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
